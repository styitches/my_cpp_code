#include<iostream>
using namespace std;
class Base{
public:
    Base(){
        m_A = 100;
    }

    void func(){
        cout << "Base - func()调用" << endl;
    }
    void func(int a){
        cout << "Base - func(int a)调用" << endl;
    }
    int m_A;
};
class Son : public Base{
public:
    Son(){
        m_A = 200;
    }
    void func(){
        cout << "Son - func()调用" << endl;
    }
    int m_A;
};
//同名成员属性
void test01(){
    Son s;
    cout << "Son下的m_A = " << s.m_A << endl;
    cout << "Base下的m_A = " << s.Base::m_A << endl;
    //通过子类对象访问到父类中的成员需要加作用域
}
//同名成员函数
void test02(){
    Son s;
    s.func();   //直接调用 调用的是子类中的同名成员
    s.Base::func();  //调用父类的加一个作用域
    // s.func(100);     语法错误  
    //如果子类中出现了和父类同名的成员函数，子类的同名成员会隐藏掉所有父类中同名的成员函数
    //如果想要访问父类中被隐藏的同名成员函数，需要加作用域
    s.Base::func(100);
}
int main(){
    test01();
    test02();
}